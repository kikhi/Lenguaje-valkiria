/* Generated By:JavaCC: Do not edit this line. compilador.java */
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.List;


class compilador implements compiladorConstants {
        public static void main( String[] args )throws ParseException, Exception
        {
                try
                {
                compilador analizador = new compilador( System.in ) ;
                        //analizador.Lexico();
                        analizador.Programa();
                        System.out.println("\tFinalizado con exito.");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("\tError.");
                }

        }

  static final public void Lexico() throws ParseException {
        ArrayList<String> TablaSimbolos;
    TablaSimbolos = new ArrayList<String>();
    Token a;
        Token b;
        Token d;
        Token e;
        ArrayList<String> Lista_Identificadores = new ArrayList<String>();
        ArrayList<String> Lista_Letras = new ArrayList<String>();
        ArrayList<String> Lista_Caracteres = new ArrayList<String>();
        ArrayList<String> Lista_Numeros = new ArrayList<String>();




    Token token;
                System.out.println("-------------"+"TABLA DE SIMBOLOS"+"-----------");
        System.out.println(String.format("%30s %25s %10s %25s %10s", "token", "|", "lexema", "|", "valor atributo"));
        System.out.println(String.format("%s", "---------------------------------------------------------------------------------------"));
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case TIPO_METODO:
      case PRINCIPAL:
      case VOID:
      case EXCEPCIONES:
      case TRY:
      case MANDA_EXCEPCION:
      case DEFINE_CLASES:
      case TIPO_DATO:
      case PARIZQ:
      case CORIZQ:
      case LLAVEIZQ:
      case PARDER:
      case CORDER:
      case LLAVEDER:
      case COMA:
      case PUNTO:
      case PUNTOYCOMA:
      case COMILLADOBLE:
      case DOSPUNTOS:
      case FUNCION:
      case MODIFICADOR_ACCESO:
      case ASIGNACION:
      case MAS:
      case MENOS:
      case MULT:
      case DIV:
      case OP_REL:
      case OP_LOG:
      case EXTENDS:
      case ENDIF:
      case ENDCICLO:
      case CICLOWHILE:
      case FOR:
      case FOREACH:
      case DO:
      case REPETIR:
      case OBJECTOS:
      case EVENT:
      case BEGIN:
      case AS:
      case INTERRUPTOR:
      case SWITCH:
      case IF:
      case ELSE:
      case ELIF:
      case CHECKED:
      case CONST:
      case PORDEFECTO:
      case RETORNA_VALOR:
      case ASYNC:
      case ASSERT:
      case DEL:
      case EXEC:
      case CALIFICADOR:
      case LIBRERIAS:
      case IN:
      case IS:
      case NONE:
      case PASS:
      case INC_DEC:
      case BOOLEAN:
      case INSTANCEOF:
      case ISSET:
      case CLONE:
      case GOTO:
      case TRAIT:
      case EVALUA:
      case TERMINA:
      case EMPY:
      case ECHO:
      case UNSET:
      case MODULE:
      case NIL:
      case EJECUTA_FALSE:
      case CALLABLE:
      case TRANSIENT:
      case NULL:
      case OPEN:
      case SYNCHRONIZED:
      case TYPEDEF:
      case PACKAGE:
      case STRICTFP:
      case VOLATILE:
      case DEFER:
      case MAP:
      case REDO:
      case ALIAS:
      case CLAUSULA:
      case MAYUSCULA:
      case MINUSCULA:
      case OPERADOR:
      case TYPEOF:
      case SIZEOF:
      case EXP_IMP:
      case CONTENEDOR_ELEMENTO:
      case STACKALLOC:
      case SET:
      case GET:
      case VALUE:
      case RANGE:
      case UNDEF:
      case MOD:
      case PARAMS:
      case ONE_WAY:
      case NAMESPACE:
      case REF:
      case MAXINT:
      case USES:
      case THREAD_SAFE:
      case ENUM:
      case ODD:
      case FIXED:
      case STRUCT:
      case USING:
      case OVERRIDE:
      case READONLY:
      case LOCK_UNLOCK:
      case ASM:
      case NEWTYPE:
      case BITLAND:
      case OUTER:
      case FUTURE:
      case REST:
      case DEBUGGER:
      case TRANSITIVE:
      case ACCEDE_CLASE_PADRE:
      case CASE:
      case FIN:
      case PROGRAMA:
      case SISTEMA:
      case LIMPIAR:
      case FUNCMATEMATICA:
      case MATEMATICA:
      case ENTRADA:
      case USO_LIBRERIA:
      case READ:
      case CONVERTIR:
      case BUTON:
      case LABEL:
      case TEXTBOX:
      case TABLE:
      case PICTUREBOX:
      case POINTER:
      case PANEL:
      case TABCONTROL:
      case TUPLE:
      case TYPE:
      case LEN:
      case REPLACE:
      case SUM:
      case STR:
      case IDENTIFIER:
      case NUMEROS:
      case NUMEROS_DECIMALES:
      case CADENA:
      case CARAC:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
        jj_consume_token(PRINT);
        break;
      case TIPO_METODO:
        jj_consume_token(TIPO_METODO);
        break;
      case PRINCIPAL:
        jj_consume_token(PRINCIPAL);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      case EXCEPCIONES:
        jj_consume_token(EXCEPCIONES);
        break;
      case TRY:
        jj_consume_token(TRY);
        break;
      case MANDA_EXCEPCION:
        jj_consume_token(MANDA_EXCEPCION);
        break;
      case DEFINE_CLASES:
        jj_consume_token(DEFINE_CLASES);
        break;
      case TIPO_DATO:
        jj_consume_token(TIPO_DATO);
        break;
      case PARIZQ:
        jj_consume_token(PARIZQ);
        break;
      case CORIZQ:
        jj_consume_token(CORIZQ);
        break;
      case LLAVEIZQ:
        jj_consume_token(LLAVEIZQ);
        break;
      case PARDER:
        jj_consume_token(PARDER);
        break;
      case CORDER:
        jj_consume_token(CORDER);
        break;
      case LLAVEDER:
        jj_consume_token(LLAVEDER);
        break;
      case COMA:
        jj_consume_token(COMA);
        break;
      case PUNTO:
        jj_consume_token(PUNTO);
        break;
      case PUNTOYCOMA:
        jj_consume_token(PUNTOYCOMA);
        break;
      case COMILLADOBLE:
        jj_consume_token(COMILLADOBLE);
        break;
      case DOSPUNTOS:
        jj_consume_token(DOSPUNTOS);
        break;
      case FUNCION:
        jj_consume_token(FUNCION);
        break;
      case MODIFICADOR_ACCESO:
        jj_consume_token(MODIFICADOR_ACCESO);
        break;
      case ASIGNACION:
        jj_consume_token(ASIGNACION);
        break;
      case MAS:
        jj_consume_token(MAS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      case MULT:
        jj_consume_token(MULT);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      case OP_REL:
        jj_consume_token(OP_REL);
        break;
      case OP_LOG:
        jj_consume_token(OP_LOG);
        break;
      case EXTENDS:
        jj_consume_token(EXTENDS);
        break;
      case ENDIF:
        jj_consume_token(ENDIF);
        break;
      case ENDCICLO:
        jj_consume_token(ENDCICLO);
        break;
      case CICLOWHILE:
        jj_consume_token(CICLOWHILE);
        break;
      case FOR:
        jj_consume_token(FOR);
        break;
      case FOREACH:
        jj_consume_token(FOREACH);
        break;
      case DO:
        jj_consume_token(DO);
        break;
      case REPETIR:
        jj_consume_token(REPETIR);
        break;
      case OBJECTOS:
        jj_consume_token(OBJECTOS);
        break;
      case EVENT:
        jj_consume_token(EVENT);
        break;
      case BEGIN:
        jj_consume_token(BEGIN);
        break;
      case AS:
        jj_consume_token(AS);
        break;
      case INTERRUPTOR:
        jj_consume_token(INTERRUPTOR);
        break;
      case SWITCH:
        jj_consume_token(SWITCH);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      case ELIF:
        jj_consume_token(ELIF);
        break;
      case CHECKED:
        jj_consume_token(CHECKED);
        break;
      case CONST:
        jj_consume_token(CONST);
        break;
      case PORDEFECTO:
        jj_consume_token(PORDEFECTO);
        break;
      case RETORNA_VALOR:
        jj_consume_token(RETORNA_VALOR);
        break;
      case ASYNC:
        jj_consume_token(ASYNC);
        break;
      case ASSERT:
        jj_consume_token(ASSERT);
        break;
      case DEL:
        jj_consume_token(DEL);
        break;
      case EXEC:
        jj_consume_token(EXEC);
        break;
      case CALIFICADOR:
        jj_consume_token(CALIFICADOR);
        break;
      case LIBRERIAS:
        jj_consume_token(LIBRERIAS);
        break;
      case IN:
        jj_consume_token(IN);
        break;
      case IS:
        jj_consume_token(IS);
        break;
      case NONE:
        jj_consume_token(NONE);
        break;
      case PASS:
        jj_consume_token(PASS);
        break;
      case INC_DEC:
        jj_consume_token(INC_DEC);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case INSTANCEOF:
        jj_consume_token(INSTANCEOF);
        break;
      case ISSET:
        jj_consume_token(ISSET);
        break;
      case CLONE:
        jj_consume_token(CLONE);
        break;
      case GOTO:
        jj_consume_token(GOTO);
        break;
      case TRAIT:
        jj_consume_token(TRAIT);
        break;
      case EVALUA:
        jj_consume_token(EVALUA);
        break;
      case TERMINA:
        jj_consume_token(TERMINA);
        break;
      case EMPY:
        jj_consume_token(EMPY);
        break;
      case ECHO:
        jj_consume_token(ECHO);
        break;
      case UNSET:
        jj_consume_token(UNSET);
        break;
      case MODULE:
        jj_consume_token(MODULE);
        break;
      case NIL:
        jj_consume_token(NIL);
        break;
      case EJECUTA_FALSE:
        jj_consume_token(EJECUTA_FALSE);
        break;
      case CALLABLE:
        jj_consume_token(CALLABLE);
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        break;
      case NULL:
        jj_consume_token(NULL);
        break;
      case OPEN:
        jj_consume_token(OPEN);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        break;
      case TYPEDEF:
        jj_consume_token(TYPEDEF);
        break;
      case PACKAGE:
        jj_consume_token(PACKAGE);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      case DEFER:
        jj_consume_token(DEFER);
        break;
      case MAP:
        jj_consume_token(MAP);
        break;
      case REDO:
        jj_consume_token(REDO);
        break;
      case ALIAS:
        jj_consume_token(ALIAS);
        break;
      case CLAUSULA:
        jj_consume_token(CLAUSULA);
        break;
      case MAYUSCULA:
        jj_consume_token(MAYUSCULA);
        break;
      case MINUSCULA:
        jj_consume_token(MINUSCULA);
        break;
      case OPERADOR:
        jj_consume_token(OPERADOR);
        break;
      case TYPEOF:
        jj_consume_token(TYPEOF);
        break;
      case SIZEOF:
        jj_consume_token(SIZEOF);
        break;
      case EXP_IMP:
        jj_consume_token(EXP_IMP);
        break;
      case CONTENEDOR_ELEMENTO:
        jj_consume_token(CONTENEDOR_ELEMENTO);
        break;
      case STACKALLOC:
        jj_consume_token(STACKALLOC);
        break;
      case SET:
        jj_consume_token(SET);
        break;
      case GET:
        jj_consume_token(GET);
        break;
      case VALUE:
        jj_consume_token(VALUE);
        break;
      case RANGE:
        jj_consume_token(RANGE);
        break;
      case UNDEF:
        jj_consume_token(UNDEF);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      case PARAMS:
        jj_consume_token(PARAMS);
        break;
      case ONE_WAY:
        jj_consume_token(ONE_WAY);
        break;
      case NAMESPACE:
        jj_consume_token(NAMESPACE);
        break;
      case REF:
        jj_consume_token(REF);
        break;
      case MAXINT:
        jj_consume_token(MAXINT);
        break;
      case USES:
        jj_consume_token(USES);
        break;
      case THREAD_SAFE:
        jj_consume_token(THREAD_SAFE);
        break;
      case ENUM:
        jj_consume_token(ENUM);
        break;
      case ODD:
        jj_consume_token(ODD);
        break;
      case FIXED:
        jj_consume_token(FIXED);
        break;
      case STRUCT:
        jj_consume_token(STRUCT);
        break;
      case USING:
        jj_consume_token(USING);
        break;
      case OVERRIDE:
        jj_consume_token(OVERRIDE);
        break;
      case READONLY:
        jj_consume_token(READONLY);
        break;
      case LOCK_UNLOCK:
        jj_consume_token(LOCK_UNLOCK);
        break;
      case ASM:
        jj_consume_token(ASM);
        break;
      case NEWTYPE:
        jj_consume_token(NEWTYPE);
        break;
      case BITLAND:
        jj_consume_token(BITLAND);
        break;
      case OUTER:
        jj_consume_token(OUTER);
        break;
      case FUTURE:
        jj_consume_token(FUTURE);
        break;
      case REST:
        jj_consume_token(REST);
        break;
      case DEBUGGER:
        jj_consume_token(DEBUGGER);
        break;
      case TRANSITIVE:
        jj_consume_token(TRANSITIVE);
        break;
      case ACCEDE_CLASE_PADRE:
        jj_consume_token(ACCEDE_CLASE_PADRE);
        break;
      case CASE:
        jj_consume_token(CASE);
        break;
      case FIN:
        jj_consume_token(FIN);
        break;
      case PROGRAMA:
        jj_consume_token(PROGRAMA);
        break;
      case SISTEMA:
        jj_consume_token(SISTEMA);
        break;
      case LIMPIAR:
        jj_consume_token(LIMPIAR);
        break;
      case FUNCMATEMATICA:
        jj_consume_token(FUNCMATEMATICA);
        break;
      case MATEMATICA:
        jj_consume_token(MATEMATICA);
        break;
      case ENTRADA:
        jj_consume_token(ENTRADA);
        break;
      case USO_LIBRERIA:
        jj_consume_token(USO_LIBRERIA);
        break;
      case READ:
        jj_consume_token(READ);
        break;
      case CONVERTIR:
        jj_consume_token(CONVERTIR);
        break;
      case BUTON:
        jj_consume_token(BUTON);
        break;
      case LABEL:
        jj_consume_token(LABEL);
        break;
      case TEXTBOX:
        jj_consume_token(TEXTBOX);
        break;
      case TABLE:
        jj_consume_token(TABLE);
        break;
      case PICTUREBOX:
        jj_consume_token(PICTUREBOX);
        break;
      case POINTER:
        jj_consume_token(POINTER);
        break;
      case PANEL:
        jj_consume_token(PANEL);
        break;
      case TABCONTROL:
        jj_consume_token(TABCONTROL);
        break;
      case TUPLE:
        jj_consume_token(TUPLE);
        break;
      case TYPE:
        jj_consume_token(TYPE);
        break;
      case LEN:
        jj_consume_token(LEN);
        break;
      case REPLACE:
        jj_consume_token(REPLACE);
        break;
      case SUM:
        jj_consume_token(SUM);
        break;
      case STR:
        jj_consume_token(STR);
        break;
      case NUMEROS_DECIMALES:
        jj_consume_token(NUMEROS_DECIMALES);
        break;
      case IDENTIFIER:
        a = jj_consume_token(IDENTIFIER);
      if(Lista_Identificadores.contains(a.image) == false)
      {
        Lista_Identificadores.add(a.image);
        System.out.println("Identificador\u0009->  " + "(" + Lista_Identificadores.indexOf(a.image) + ")");
      }
      else
      {
        System.out.println("Identificador\u0009->  " + "(" + Lista_Identificadores.indexOf(a.image) + ")");
      }
        break;
      case CADENA:
        b = jj_consume_token(CADENA);
      if(Lista_Letras.contains(b.image) == false)
      {
        Lista_Letras.add(b.image);
        System.out.println("Cadena\u0009->  " + "(" + Lista_Letras.indexOf(b.image) + ")");
      }
      else
      {
        System.out.println("Cadena\u0009->  " + "(" + Lista_Letras.indexOf(b.image) + ")");
      }
        break;
      case CARAC:
        d = jj_consume_token(CARAC);
      if(Lista_Caracteres.contains(d.image) == false)
      {
        Lista_Caracteres.add(d.image);
        System.out.println("Caracter            ->  " + "(" + Lista_Caracteres.indexOf(d.image) + ")");
      }
      else
      {
        System.out.println("Caracter            ->  " + "(" + Lista_Caracteres.indexOf(d.image) + ")");
      }
        break;
      case NUMEROS:
        e = jj_consume_token(NUMEROS);
      if(Lista_Numeros.contains(e.image) == false)
      {
        Lista_Numeros.add(e.image);
        System.out.println("Numero              ->  " + "(" + Lista_Numeros.indexOf(e.image) + ")");
      }
      else
      {
        System.out.println("Numero              ->  " + "(" + Lista_Numeros.indexOf(e.image) + ")");
      }
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

//1. namespace
  static final public void Programa() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIBRERIAS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      librerias();
    }
    jj_consume_token(NAMESPACE);
    jj_consume_token(IDENTIFIER);
    programaPrincipal();
    jj_consume_token(FIN);
    jj_consume_token(0);
  }

//2. librerias
  static final public void librerias() throws ParseException {
    jj_consume_token(LIBRERIAS);
    jj_consume_token(USO_LIBRERIA);
  }

//3.Programa principal (class program)
  static final public void programaPrincipal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROGRAMA:
      jj_consume_token(PROGRAMA);
      jj_consume_token(DEFINE_CLASES);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIPO_DATO:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        declaracionVariable();
      }
      metodoPrincipal();
      jj_consume_token(FIN);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOSPUNTOS:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        defineClase();
        break;
      case DOSPUNTOS:
        herencia();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//4. Metodo main
  static final public void metodoPrincipal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRINCIPAL:
      jj_consume_token(PRINCIPAL);
      bloqueCodigoMetodo();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case FUNCION:
      case MODIFICADOR_ACCESO:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case MODIFICADOR_ACCESO:
        defineMetodos();
        break;
      case FUNCION:
        defineFuncion();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void bloqueCodigoMetodo() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case TRY:
      case TIPO_DATO:
      case PARIZQ:
      case CORIZQ:
      case LLAVEIZQ:
      case EXTENDS:
      case CICLOWHILE:
      case FOR:
      case DO:
      case OBJECTOS:
      case SWITCH:
      case IF:
      case TERMINA:
      case MAYUSCULA:
      case MINUSCULA:
      case TYPEOF:
      case SIZEOF:
      case SET:
      case GET:
      case RANGE:
      case SISTEMA:
      case MATEMATICA:
      case READ:
      case CONVERTIR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
        imprime();
        break;
      case TIPO_DATO:
        declaracionVariable();
        break;
      case CICLOWHILE:
      case FOR:
      case DO:
        ciclos();
        break;
      case TRY:
        excepciones();
        break;
      case IF:
        preguntaIf();
        break;
      case OBJECTOS:
        objeto();
        break;
      case EXTENDS:
        thiss();
        break;
      case IDENTIFIER:
        llamadaMetodo();
        break;
      case SET:
        sett();
        break;
      case GET:
        gett();
        break;
      case TERMINA:
        salir();
        break;
      case SISTEMA:
        limpiar();
        break;
      case MATEMATICA:
        operacionMatematica();
        break;
      case PARIZQ:
      case LLAVEIZQ:
        contieneElementos();
        break;
      case RANGE:
        rango();
        break;
      case CORIZQ:
        matriz();
        break;
      case SWITCH:
        preguntaSwitch();
        break;
      case READ:
        leer();
        break;
      case SIZEOF:
        numeroBytes();
        break;
      case TYPEOF:
        tipoOperador();
        break;
      case CONVERTIR:
        convertir();
        break;
      case MAYUSCULA:
      case MINUSCULA:
        may_min();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//5. Declaración de variables
  static final public void declaracionVariable() throws ParseException {
    jj_consume_token(TIPO_DATO);
    valor();
    jj_consume_token(ASIGNACION);
    jj_consume_token(IDENTIFIER);
  }

  static final public void valor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case NUMEROS:
      jj_consume_token(NUMEROS);
      break;
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case CARAC:
      jj_consume_token(CARAC);
      break;
    case NUMEROS_DECIMALES:
      jj_consume_token(NUMEROS_DECIMALES);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//6. Pregunta IF
  static final public void preguntaIf() throws ParseException {
    jj_consume_token(IF);
    condicion();
    bloqueCodigo();
    jj_consume_token(FIN);
  }

  static final public void condicion() throws ParseException {
    valor();
    jj_consume_token(OP_REL);
    valor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_LOG:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      jj_consume_token(OP_LOG);
      valor();
      jj_consume_token(OP_REL);
      valor();
    }
  }

//7. Imprimir
  static final public void imprime() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(PARIZQ);
    imprimeValor();
    jj_consume_token(PARDER);
  }

  static final public void imprimeValor() throws ParseException {
    valor();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      jj_consume_token(MAS);
      valor();
    }
  }

// 8. Switch case
  static final public void preguntaSwitch() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(PARIZQ);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(PARDER);
    casos();
    porDefecto();
    jj_consume_token(FIN);
  }

  static final public void casos() throws ParseException {
    label_9:
    while (true) {
      jj_consume_token(CASE);
      valor();
      bloqueCodigo();
      jj_consume_token(INTERRUPTOR);
      jj_consume_token(FIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
    }
  }

  static final public void porDefecto() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PORDEFECTO:
      jj_consume_token(PORDEFECTO);
      jj_consume_token(DOSPUNTOS);
      bloqueCodigo();
      jj_consume_token(FIN);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

//9. ciclos
  static final public void ciclos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CICLOWHILE:
      cicloWhile();
      break;
    case FOR:
      cicloFor();
      break;
    case DO:
      cicloDo();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void cicloWhile() throws ParseException {
    jj_consume_token(CICLOWHILE);
    condicion();
    bloqueCodigo();
    jj_consume_token(FIN);
  }

  static final public void cicloFor() throws ParseException {
    jj_consume_token(FOR);
    inicializador();
    jj_consume_token(ASIGNACION);
    jj_consume_token(NUMEROS);
    jj_consume_token(PUNTOYCOMA);
    condicion();
    jj_consume_token(PUNTOYCOMA);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(INC_DEC);
    bloqueCodigo();
    jj_consume_token(FIN);
  }

  static final public void inicializador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_DATO:
      jj_consume_token(TIPO_DATO);
      jj_consume_token(IDENTIFIER);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void cicloDo() throws ParseException {
    jj_consume_token(DO);
    bloqueCodigo();
    jj_consume_token(FIN);
    jj_consume_token(PARIZQ);
    jj_consume_token(CICLOWHILE);
    condicion();
    jj_consume_token(PARDER);
  }

  static final public void bloqueCodigo() throws ParseException {
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRINT:
      case TRY:
      case TIPO_DATO:
      case PARIZQ:
      case CORIZQ:
      case LLAVEIZQ:
      case CICLOWHILE:
      case FOR:
      case DO:
      case IF:
      case TERMINA:
      case MAYUSCULA:
      case MINUSCULA:
      case RANGE:
      case SISTEMA:
      case MATEMATICA:
      case CONVERTIR:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_DATO:
        declaracionVariable();
        break;
      case CICLOWHILE:
      case FOR:
      case DO:
        ciclos();
        break;
      case PRINT:
        imprime();
        break;
      case IF:
        preguntaIf();
        break;
      case PARIZQ:
      case LLAVEIZQ:
        contieneElementos();
        break;
      case MATEMATICA:
        operacionMatematica();
        break;
      case TRY:
        excepciones();
        break;
      case TERMINA:
        salir();
        break;
      case SISTEMA:
        limpiar();
        break;
      case RANGE:
        rango();
        break;
      case CORIZQ:
        matriz();
        break;
      case IDENTIFIER:
        inc_dec();
        break;
      case CONVERTIR:
        convertir();
        break;
      case MAYUSCULA:
      case MINUSCULA:
        may_min();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//10. Funcion
  static final public void defineFuncion() throws ParseException {
    jj_consume_token(FUNCION);
    jj_consume_token(PARIZQ);
    defineParametros();
    jj_consume_token(PARDER);
    jj_consume_token(IDENTIFIER);
    bloqueCodigoMetodo();
    jj_consume_token(FIN);
  }

  static final public void defineParametros() throws ParseException {
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_DATO:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_11;
      }
      defineParametro();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMA);
        defineParametro();
      }
    }
  }

  static final public void defineParametro() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_DATO:
      jj_consume_token(TIPO_DATO);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
  }

//11. Excepcion try-catch
  static final public void excepciones() throws ParseException {
    jj_consume_token(TRY);
    bloqueCodigo();
    jj_consume_token(FIN);
    jj_consume_token(MANDA_EXCEPCION);
    jj_consume_token(PARIZQ);
    jj_consume_token(PARDER);
    imprime();
    jj_consume_token(FIN);
  }

//12. Define clase
  static final public void defineClase() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(MODIFICADOR_ACCESO);
    jj_consume_token(DEFINE_CLASES);
    jj_consume_token(DOSPUNTOS);
    bloqueCodigoClase();
    jj_consume_token(FIN);
  }

  static final public void bloqueCodigoClase() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
      case TIPO_DATO:
      case PARIZQ:
      case CORIZQ:
      case LLAVEIZQ:
      case FUNCION:
      case MODIFICADOR_ACCESO:
      case SET:
      case GET:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCION:
        defineFuncion();
        break;
      case VOID:
      case MODIFICADOR_ACCESO:
        defineMetodos();
        break;
      case SET:
        sett();
        break;
      case GET:
        gett();
        break;
      case PARIZQ:
      case LLAVEIZQ:
        contieneElementos();
        break;
      case TIPO_DATO:
        declaracionVariable();
        break;
      case CORIZQ:
        matriz();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//13. Objeto
  static final public void objeto() throws ParseException {
    jj_consume_token(OBJECTOS);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASIGNACION);
    jj_consume_token(OPERADOR);
    jj_consume_token(OBJECTOS);
    jj_consume_token(PARIZQ);
    jj_consume_token(PARDER);
  }

// 14. contiene elentos (listas y arreglos)
  static final public void contieneElementos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LLAVEIZQ:
      lista();
      break;
    case PARIZQ:
      arreglo();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void lista() throws ParseException {
    jj_consume_token(LLAVEIZQ);
    elementosContenidos();
    jj_consume_token(LLAVEDER);
    jj_consume_token(ASIGNACION);
    inicializador();
  }

  static final public void elementoContenido() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CADENA:
      jj_consume_token(CADENA);
      break;
    case NUMEROS:
      jj_consume_token(NUMEROS);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void elementosContenidos() throws ParseException {
    elementoContenido();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMA);
      elementoContenido();
    }
  }

  static final public void arreglo() throws ParseException {
    jj_consume_token(PARIZQ);
    elementosContenidos();
    jj_consume_token(PARDER);
    jj_consume_token(ASIGNACION);
    inicializador();
    jj_consume_token(CORIZQ);
    jj_consume_token(NUMEROS);
    jj_consume_token(CORDER);
  }

//15. retornno 
  static final public void retorno() throws ParseException {
    jj_consume_token(RETORNA_VALOR);
    jj_consume_token(IDENTIFIER);
  }

//16. leer
  static final public void leer() throws ParseException {
    jj_consume_token(READ);
    jj_consume_token(PUNTO);
    jj_consume_token(OPERADOR);
    jj_consume_token(READ);
    jj_consume_token(PARIZQ);
    jj_consume_token(PARDER);
  }

//17. rango
  static final public void rango() throws ParseException {
    jj_consume_token(RANGE);
    jj_consume_token(PARIZQ);
    dentroRango();
    jj_consume_token(PARDER);
  }

  static final public void dentroRango() throws ParseException {
    jj_consume_token(NUMEROS);
    jj_consume_token(COMA);
    jj_consume_token(NUMEROS);
  }

//18. size of
  static final public void numeroBytes() throws ParseException {
    jj_consume_token(SIZEOF);
    jj_consume_token(PARIZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_DATO:
      jj_consume_token(TIPO_DATO);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARDER);
  }

//19. type of
  static final public void tipoOperador() throws ParseException {
    jj_consume_token(TYPEOF);
    jj_consume_token(IDENTIFIER);
  }

//20. this
  static final public void thiss() throws ParseException {
    jj_consume_token(EXTENDS);
    jj_consume_token(PUNTO);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASIGNACION);
    jj_consume_token(IDENTIFIER);
  }

// 21. exit
  static final public void salir() throws ParseException {
    jj_consume_token(TERMINA);
    jj_consume_token(PARIZQ);
    jj_consume_token(PARDER);
  }

// 22. llama metodo
  static final public void llamadaMetodo() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(PARIZQ);
    defineParametros();
    jj_consume_token(PARDER);
  }

//23. herencia
  static final public void herencia() throws ParseException {
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(DEFINE_CLASES);
    jj_consume_token(DOSPUNTOS);
    bloqueCodigoClase();
    jj_consume_token(FIN);
  }

//24. set
  static final public void sett() throws ParseException {
    jj_consume_token(SET);
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASIGNACION);
    valor();
    jj_consume_token(FIN);
  }

//25. get
  static final public void gett() throws ParseException {
    jj_consume_token(GET);
    jj_consume_token(DOSPUNTOS);
    retorno();
    jj_consume_token(FIN);
  }

//26. matrices
  static final public void matriz() throws ParseException {
    jj_consume_token(CORIZQ);
    jj_consume_token(NUMEROS);
    jj_consume_token(COMA);
    jj_consume_token(NUMEROS);
    jj_consume_token(CORDER);
    inicializador();
    jj_consume_token(ASIGNACION);
    jj_consume_token(OPERADOR);
    jj_consume_token(TIPO_DATO);
    jj_consume_token(CORIZQ);
    elementosMatriz();
    jj_consume_token(CORDER);
  }

  static final public void elementosMatriz() throws ParseException {
    jj_consume_token(LLAVEIZQ);
    elementosContenidos();
    jj_consume_token(LLAVEDER);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMA);
      jj_consume_token(LLAVEIZQ);
      elementosContenidos();
      jj_consume_token(LLAVEDER);
    }
  }

//27. limpiar
  static final public void limpiar() throws ParseException {
    jj_consume_token(SISTEMA);
    jj_consume_token(PUNTO);
    jj_consume_token(LIMPIAR);
  }

//28. math
  static final public void operacionMatematica() throws ParseException {
    jj_consume_token(MATEMATICA);
    jj_consume_token(PUNTO);
    jj_consume_token(FUNCMATEMATICA);
    jj_consume_token(PARIZQ);
    valorOperacion();
    jj_consume_token(PARDER);
  }

  static final public void valorOperacion() throws ParseException {
    valorOper();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_16;
      }
      jj_consume_token(COMA);
      valorOper();
    }
  }

  static final public void valorOper() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    case NUMEROS:
      jj_consume_token(NUMEROS);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//30. definir metodos
  static final public void defineMetodos() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODIFICADOR_ACCESO:
      metodoRetorno();
      break;
    case VOID:
      metodoSinRetorno();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void metodoRetorno() throws ParseException {
    jj_consume_token(MODIFICADOR_ACCESO);
    jj_consume_token(TIPO_DATO);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(PARIZQ);
    defineParametros();
    jj_consume_token(PARDER);
    jj_consume_token(DOSPUNTOS);
    bloqueCodigoMetodo();
    retorno();
    jj_consume_token(FIN);
  }

  static final public void metodoSinRetorno() throws ParseException {
    jj_consume_token(VOID);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(PARIZQ);
    defineParametros();
    jj_consume_token(PARDER);
    bloqueCodigoMetodo();
    jj_consume_token(FIN);
  }

  static final public void inc_dec() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(INC_DEC);
  }

//31. Convierte
  static final public void convertir() throws ParseException {
    jj_consume_token(CONVERTIR);
    jj_consume_token(PARIZQ);
    jj_consume_token(TIPO_DATO);
    jj_consume_token(PARIZQ);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(PARDER);
    jj_consume_token(PARDER);
    jj_consume_token(ASIGNACION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPO_DATO:
      jj_consume_token(TIPO_DATO);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
  }

//32. mayuscula y MINUSCULA
  static final public void may_min() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUSCULA:
      convMinuscula();
      break;
    case MAYUSCULA:
      convMayuscula();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void convMinuscula() throws ParseException {
    jj_consume_token(MINUSCULA);
    jj_consume_token(PUNTO);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      jj_consume_token(ASIGNACION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_DATO:
        jj_consume_token(TIPO_DATO);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
  }

  static final public void convMayuscula() throws ParseException {
    jj_consume_token(MAYUSCULA);
    jj_consume_token(PUNTO);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      jj_consume_token(ASIGNACION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPO_DATO:
        jj_consume_token(TIPO_DATO);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public compiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xfffffffe,0x0,0x200,0x0,0x100000,0x100000,0x8,0x600010,0x600010,0x40001e42,0x40001e42,0x0,0x20000000,0x1000000,0x0,0x0,0x0,0x200,0x1e42,0x1e42,0x200,0x10000,0x200,0x601e10,0x601e10,0x1400,0x0,0x10000,0x200,0x10000,0x10000,0x0,0x400010,0x200,0x0,0x200,0x800000,0x200,0x800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffffffff,0xffffffff,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1856,0x1856,0x0,0x0,0x0,0x0,0x20000,0x16,0x0,0x1016,0x1016,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6c000020,0x6c000020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000020,0xc000020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0xffffffff,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c,0x2c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0xc,0xc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x6fffffff,0x6fffffff,0x0,0x0,0x4,0x2000000,0x2000000,0x0,0x0,0x0,0x2000648,0x2000648,0x6e000000,0x0,0x0,0x1,0x0,0x0,0x2000000,0x2000448,0x2000448,0x2000000,0x0,0x0,0x0,0x0,0x0,0x24000000,0x0,0x2000000,0x0,0x0,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new compiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public compilador(compiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(compiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[167];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 167; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
